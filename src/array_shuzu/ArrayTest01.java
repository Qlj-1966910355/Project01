package array_shuzu;

/**
 * 1、java中数组是一种引用数据类型。其实际是一种简单的数据结构。
 * <p>
 * 2、数组既可以存储基本数据类型的数据，也可以存储引用数据类型的数据（包括类引用变量）
 * <p>
 * 3、数组是一个引用数据类型。<数组对象存储在堆内存></>
 * <p>
 * 4、若数组内存储的是引用数据类型数据，实际上存储的是引用对象的内存地址。
 * <p>
 * 5、数组一旦创建，在Java中规定，长度不可变
 * <p>
 * 6、**所有数组对象都有length属性（Java自带），用来获取数组元素个数。**     // 注意是属性
 * <p>
 * 7、java数组要求数组中的元素类型统一。 eg:int[]类型数组只能存储int类型的数据
 * <p>
 * 8、数组中元素存储地址是连续的。并且第一个元素的内存地址就是整个数组的内存地址。
 * <p>
 * 9、数组元素索引顺序从0开始依次加1，尾部位置(length - 1)      // 注意java中没有-1位置
 * <p>
 * 10、数组优点：
 * -> 每一个元素的内存地址是连续的。
 * -> 每一个元素的类型相同，所以每个元素占用的空间大小一样
 * -> 数组引用地址就是数组第一个元素的内存地址
 * -> 根据以上几点，内存可以直接计算出其他元素的内存地址，直接通过内存地址可以定位到数组中的每个元素，效率很高。
 * eg:int[]类型的数组，每个元素的数据类型也是int类型。而int类型为4个bit，所以内存可以直接定位其他元素。
 * <p>
 * 11、数组缺点：
 * -> 由于数组中每个元素是连续的，所以对数组进行删除和增加操作效率较低（除最后一个元素）。
 * 原因：在删除与增加操作时，会涉及到后面元素与前面元素连续问题。（元素向前向后位移操作）
 * -> 数组存储量不能过大。
 * 原因：在内存中很难找到一块非常大的连续内存空间。
 */

/**
 * 数组声明与初始化
 * 1、声明一维数组
 * 语法：
 * 数据类型[] 数组名;          // eg：int[] array_1;   String[] array_2;   User[] array_3;
 * <p>
 * 2、初始化：
 * 静态初始化：
 * 数据类型[] 数组名 = {元素值1,元素值2,……};         // eg：int[] array_1 = {1,2,3,4,5,6};
 * <p>
 * 动态初始化：
 * 数据类型[] 数组名 = new 数据类型[元素个数];       // eg：int[] array_1 = int[5];
 * 注：默认初始化每个元素是0,null,false.
 * <p>
 * 访问数组元素
 * 语法：
 * 数组名[位置]
 */
public class ArrayTest01 {
    public static void main(String[] args) {
        // 声明一个数组，并进行静态初始化
        int[] array_1 = {1, 2, 3, 4, 5, 6};

        // 声明一个数组，并使用动态初始化
        String[] array_2 = new String[10];
        System.out.println("array_1中元素个数：" + array_1.length + "\narray_1中元素个数：" + array_2.length);

        // 访问数组元素
        System.out.println("array_1数组第3个元素为：" + array_1[2]);   // 从0开始索引，位置为2就是第三个元素
        System.out.println("array_2数组第8个元素为：" + array_2[7]);
        // System.out.println("array_1数组最后一个元素为：" + array_1[-1]);    // java中没有-1位置
        System.out.println("array_1数组最后一个元素为：" + array_1[array_1.length - 1]);


        // 遍历数组
        System.out.print("遍历数组并格式化输出：[");
        for (int i = 0; i < array_1.length; i++) {
            if (i == array_1.length - 1) {
                System.out.println(array_1[i] + "]");
            } else System.out.print("" + array_1[i] + ",");
        }

        // 从后往前遍历数组
        for (int i = array_1.length - 1; i >= 0; i--) {
            System.out.println("从后往前遍历-> " + array_1[i]);
        }
    }


}
